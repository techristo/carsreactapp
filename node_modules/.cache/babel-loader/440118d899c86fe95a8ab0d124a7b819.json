{"ast":null,"code":"import _slicedToArray from \"/home/user/cars/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/user/cars/src/components/Setting/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Radio } from \"antd\";\nimport { useDispatch } from \"react-redux\";\nimport { updateSetting } from \"./redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Setting = function Setting(_ref) {\n  _s();\n\n  var _ref$title = _ref.title,\n      title = _ref$title === void 0 ? \"\" : _ref$title,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? \"\" : _ref$type,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? [] : _ref$options,\n      _ref$defaultValue = _ref.defaultValue,\n      defaultValue = _ref$defaultValue === void 0 ? \"\" : _ref$defaultValue;\n  var dispatch = useDispatch();\n  var activeSettings = useSelector(function (state) {\n    return state.setting;\n  });\n  useEffect(function () {\n    var setDefaultValueAction = updateSetting({\n      type: type,\n      value: defaultValue\n    });\n    dispatch(setDefaultValueAction);\n  }, [defaultValue, dispatch, type]);\n\n  var handleChange = function handleChange(event) {\n    var updateAction = updateSetting({\n      type: type,\n      value: event.target.value\n    });\n    dispatch(updateAction);\n  };\n\n  var currentValue = activeSettings[type];\n\n  var isDisabled = function isDisabled(option) {\n    if (option !== null && option !== void 0 && option.incompatible) {\n      return Object.entries(option === null || option === void 0 ? void 0 : option.incompatible).some(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            incompatibleKey = _ref3[0],\n            valueList = _ref3[1];\n\n        return valueList.includes(activeSettings[incompatibleKey]);\n      });\n    }\n\n    return false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Radio.Group, {\n      buttonStyle: \"solid\",\n      onChange: handleChange,\n      value: currentValue,\n      children: options === null || options === void 0 ? void 0 : options.map(function (option) {\n        return /*#__PURE__*/_jsxDEV(Radio.Button, {\n          value: option.value,\n          disabled: isDisabled(option),\n          children: option.label\n        }, option.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Setting, \"KodLPi5uI7VaSxvFq20W3uohDsM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Setting;\nexport default Setting;\n\nvar _c;\n\n$RefreshReg$(_c, \"Setting\");","map":{"version":3,"sources":["/home/user/cars/src/components/Setting/index.js"],"names":["useEffect","useSelector","Radio","useDispatch","updateSetting","Setting","title","type","options","defaultValue","dispatch","activeSettings","state","setting","setDefaultValueAction","value","handleChange","event","updateAction","target","currentValue","isDisabled","option","incompatible","Object","entries","some","incompatibleKey","valueList","includes","map","label"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,QAA8B,SAA9B;;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAKV;AAAA;;AAAA,wBAJJC,KAII;AAAA,MAJJA,KAII,2BAJI,EAIJ;AAAA,uBAHJC,IAGI;AAAA,MAHJA,IAGI,0BAHG,EAGH;AAAA,0BAFJC,OAEI;AAAA,MAFJA,OAEI,6BAFM,EAEN;AAAA,+BADJC,YACI;AAAA,MADJA,YACI,kCADW,EACX;AACJ,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,MAAMQ,cAAc,GAAGV,WAAW,CAAC,UAACW,KAAD,EAAW;AAC5C,WAAOA,KAAK,CAACC,OAAb;AACD,GAFiC,CAAlC;AAIAb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMc,qBAAqB,GAAGV,aAAa,CAAC;AAAEG,MAAAA,IAAI,EAAJA,IAAF;AAAQQ,MAAAA,KAAK,EAAEN;AAAf,KAAD,CAA3C;AACAC,IAAAA,QAAQ,CAACI,qBAAD,CAAR;AACD,GAHQ,EAGN,CAACL,YAAD,EAAeC,QAAf,EAAyBH,IAAzB,CAHM,CAAT;;AAKA,MAAMS,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9B,QAAMC,YAAY,GAAGd,aAAa,CAAC;AAAEG,MAAAA,IAAI,EAAJA,IAAF;AAAQQ,MAAAA,KAAK,EAAEE,KAAK,CAACE,MAAN,CAAaJ;AAA5B,KAAD,CAAlC;AACAL,IAAAA,QAAQ,CAACQ,YAAD,CAAR;AACD,GAHD;;AAKA,MAAME,YAAY,GAAGT,cAAc,CAACJ,IAAD,CAAnC;;AAEA,MAAMc,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAAY;AAC7B,QAAIA,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAEC,YAAZ,EAA0B;AACxB,aAAOC,MAAM,CAACC,OAAP,CACLH,MADK,aACLA,MADK,uBACLA,MAAM,CAAEC,YADH,EAELG,IAFK,CAEA;AAAA;AAAA,YAAEC,eAAF;AAAA,YAAmBC,SAAnB;;AAAA,eACLA,SAAS,CAACC,QAAV,CAAmBlB,cAAc,CAACgB,eAAD,CAAjC,CADK;AAAA,OAFA,CAAP;AAKD;;AAED,WAAO,KAAP;AACD,GAVD;;AAYA,sBACE;AAAA,4BACE;AAAA,gBAAMrB;AAAN;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,KAAD,CAAO,KAAP;AACE,MAAA,WAAW,EAAC,OADd;AAEE,MAAA,QAAQ,EAAEU,YAFZ;AAGE,MAAA,KAAK,EAAEI,YAHT;AAAA,gBAKGZ,OALH,aAKGA,OALH,uBAKGA,OAAO,CAAEsB,GAAT,CAAa,UAACR,MAAD;AAAA,4BACZ,QAAC,KAAD,CAAO,MAAP;AAEE,UAAA,KAAK,EAAEA,MAAM,CAACP,KAFhB;AAGE,UAAA,QAAQ,EAAEM,UAAU,CAACC,MAAD,CAHtB;AAAA,oBAKGA,MAAM,CAACS;AALV,WACOT,MAAM,CAACP,KADd;AAAA;AAAA;AAAA;AAAA,iBADY;AAAA,OAAb;AALH;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAoBD,CAvDD;;GAAMV,O;UAMaF,W,EACMF,W;;;KAPnBI,O;AAyDN,eAAeA,OAAf","sourcesContent":["import { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Radio } from \"antd\";\nimport { useDispatch } from \"react-redux\";\nimport { updateSetting } from \"./redux\";\n\nconst Setting = ({\n  title = \"\",\n  type = \"\",\n  options = [],\n  defaultValue = \"\"\n}) => {\n  const dispatch = useDispatch();\n  const activeSettings = useSelector((state) => {\n    return state.setting;\n  });\n\n  useEffect(() => {\n    const setDefaultValueAction = updateSetting({ type, value: defaultValue });\n    dispatch(setDefaultValueAction);\n  }, [defaultValue, dispatch, type]);\n\n  const handleChange = (event) => {\n    const updateAction = updateSetting({ type, value: event.target.value });\n    dispatch(updateAction);\n  };\n\n  const currentValue = activeSettings[type];\n\n  const isDisabled = (option) => {\n    if (option?.incompatible) {\n      return Object.entries(\n        option?.incompatible\n      ).some(([incompatibleKey, valueList]) =>\n        valueList.includes(activeSettings[incompatibleKey])\n      );\n    }\n\n    return false;\n  };\n\n  return (\n    <div>\n      <div>{title}</div>\n      <Radio.Group\n        buttonStyle=\"solid\"\n        onChange={handleChange}\n        value={currentValue}\n      >\n        {options?.map((option) => (\n          <Radio.Button\n            key={option.value}\n            value={option.value}\n            disabled={isDisabled(option)}\n          >\n            {option.label}\n          </Radio.Button>\n        ))}\n      </Radio.Group>\n    </div>\n  );\n};\n\nexport default Setting;\n"]},"metadata":{},"sourceType":"module"}